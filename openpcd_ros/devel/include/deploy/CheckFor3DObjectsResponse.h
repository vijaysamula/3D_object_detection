// Generated by gencpp from file deploy/CheckFor3DObjectsResponse.msg
// DO NOT EDIT!


#ifndef DEPLOY_MESSAGE_CHECKFOR3DOBJECTSRESPONSE_H
#define DEPLOY_MESSAGE_CHECKFOR3DOBJECTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <jsk_recognition_msgs/BoundingBoxArray.h>

namespace deploy
{
template <class ContainerAllocator>
struct CheckFor3DObjectsResponse_
{
  typedef CheckFor3DObjectsResponse_<ContainerAllocator> Type;

  CheckFor3DObjectsResponse_()
    : id(0)
    , bounding_boxes()  {
    }
  CheckFor3DObjectsResponse_(const ContainerAllocator& _alloc)
    : id(0)
    , bounding_boxes(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef  ::jsk_recognition_msgs::BoundingBoxArray_<ContainerAllocator>  _bounding_boxes_type;
  _bounding_boxes_type bounding_boxes;





  typedef boost::shared_ptr< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CheckFor3DObjectsResponse_

typedef ::deploy::CheckFor3DObjectsResponse_<std::allocator<void> > CheckFor3DObjectsResponse;

typedef boost::shared_ptr< ::deploy::CheckFor3DObjectsResponse > CheckFor3DObjectsResponsePtr;
typedef boost::shared_ptr< ::deploy::CheckFor3DObjectsResponse const> CheckFor3DObjectsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator1> & lhs, const ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.bounding_boxes == rhs.bounding_boxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator1> & lhs, const ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deploy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6c048a00a15be3d83599ec7bb870580";
  }

  static const char* value(const ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6c048a00a15be3dULL;
  static const uint64_t static_value2 = 0x83599ec7bb870580ULL;
};

template<class ContainerAllocator>
struct DataType< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deploy/CheckFor3DObjectsResponse";
  }

  static const char* value(const ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 id\n"
"jsk_recognition_msgs/BoundingBoxArray bounding_boxes\n"
"\n"
"================================================================================\n"
"MSG: jsk_recognition_msgs/BoundingBoxArray\n"
"# BoundingBoxArray is a list of BoundingBox.\n"
"# You can use jsk_rviz_plugins to visualize BoungingBoxArray on rviz.\n"
"Header header\n"
"BoundingBox[] boxes\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: jsk_recognition_msgs/BoundingBox\n"
"# BoundingBox represents a oriented bounding box.\n"
"Header header\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Vector3 dimensions  # size of bounding box (x, y, z)\n"
"# You can use this field to hold value such as likelihood\n"
"float32 value\n"
"uint32 label\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.bounding_boxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckFor3DObjectsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deploy::CheckFor3DObjectsResponse_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "bounding_boxes: ";
    s << std::endl;
    Printer< ::jsk_recognition_msgs::BoundingBoxArray_<ContainerAllocator> >::stream(s, indent + "  ", v.bounding_boxes);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEPLOY_MESSAGE_CHECKFOR3DOBJECTSRESPONSE_H
